#!/bin/bash
#-------------------------------------------------------------------------------

if [[ -f `pwd`/functions ]]; then
  source functions
else
  echo "Archivo no disponible: functions"
  exit 1
fi
#WELCOME {{{
Bienvenidos(){
  clear
  echo -e "${Bold}BIENVENIDOS AL INSTALADOR DEL SISTEMA BASE DE ARCHLINUX${White}"
  print_line
  echo "Requerimientos:"
  echo "-> ISO ArchLinux"
  echo "-> Conexión a Internet"
  print_line
  echo "Para Cancelar la Instalacion Precione CTRL+C"
  echo "http://www.github.com/archlinuxlatino/ISA"
  echo "visita nuestras redes @archlinuxlatino"
  print_line
  echo -e "\nCopias de Seguridad:"
  print_line
  # backup old configs
  [[ ! -f /etc/pacman.conf.backup ]] && cp -v /etc/pacman.conf /etc/pacman.conf.backup || echo "/etc/pacman.conf.backup";
  [[ -f /etc/ssh/sshd_config.backup ]] && echo "/etc/ssh/sshd_conf.backup";
  [[ -f /etc/sudoers.backup ]] && echo "/etc/sudoers.backup";
  pause_function
  echo ""
}
#}}}
#Seleccionar Teclado {{{
seleccionar_teclado(){
  print_title "KEYMAP (Teclado Latino Opcion 33) = la-latin1)"
  keymap_list=("be-latin1" "br-latin1-abnt2" "br-latin1-us" "colemak" "ctrl" "cz-lat2" "cz-lat2-prog" "cz-us-qwertz" "de-latin1" "de-latin1-nodeadkeys" "de-mobii" "de_CH-latin1" "defkeymap" "dk-latin1" "dvorak-es" "dvorak-fr" "dvorak-l" "dvorak-la" "emacs" "emacs2" "es" "es-cp850" "es-olpc"" euro" "euro1" "euro2" "fr-bepo-latin9" "fr-latin1" "fr-latin9" "fr-pc" "fr_CH-latin1" "is-latin1" "is-latin1-us" "la-latin1" "mac-de-latin1" "mac-de-latin1-nodeadkeys" "mac-dk-latin1" "mac-dvorak" "mac-es" "mac-fi-latin1" "mac-fr_CH-latin1" "mac-pt-latin1" "mac-se" "mac-template" "mac-uk" "mac-us" "mk"  "nl" "nl2" "no" "no-dvorak" "no-latin1" "pc110" "pl" "pl1" "pl2" "pl3" "pl4" "pt-latin1" "pt-latin9" "se-fi-lat6" "se-lat6" "sg-latin1" "sg-latin1-lk450" "sunt4-es" "sunt4-fi-latin1" "sunt4-no-latin1" "sunt5-de-latin1" "sunt5-fi-latin1" "sunt5-fr-latin1" "sv-latin1" "tj_alt-UTF8" "tr_f-latin5" "tr_q-latin5" "ttwin_alt-UTF-8" "unicode" "us" "us-acentos" "windowkeys")
  PS3="$prompt1"
  print_info "The KEYMAP la variable se especifica en el archivo /etc/rc.conf. Define qué mapa de teclas es el teclado en las consolas virtuales. Los archivos de tabla de claves son proporcionados por el paquete kbd."
  print_info "El teclado manualmente se define (KEYMAP=version-teclado) en el archivo /etc/vconsole.conf"
  echo "keymap Se Lista en /usr/share/kbd/keymaps"
  echo ""
  select KEYMAP in "${keymap_list[@]}"; do
    if contains_element "$KEYMAP" "${keymap_list[@]}"; then
      loadkeys "$KEYMAP"
      break
    else
      invalid_option
    fi
  done
}
configurar_teclado(){
  echo "KEYMAP=$KEYMAP" >${MOUNTPOINT}/etc/vconsole.conf
}
#}}}
#Seleccionar Disco{{{
seleccionar_disco(){
  devices_list=($(lsblk -d | awk '{print "/dev/" $1}' | grep 'sda\|hd\|vd\|nvme\|mmcblk'))
  PS3="$prompt1"
  echo -e "Dispositivos Disponibles:\n"
  lsblk -lnp -I 2,3,8,9,22,34,56,57,58,65,66,67,68,69,70,71,72,91,128,129,130,131,132,133,134,135,259 | awk '{print $1,$4,$6,$7}' | column -t
  echo -e "\n"
  echo -e "Seleccionar Disco a Particionar:\n"
  select device in "${devices_list[@]}"; do
    if contains_element "${device}" "${devices_list[@]}"; then
      break
    else
      invalid_option
    fi
  done
  BOOT_MOUNTPOINT=$device
}
#}}}
#Crear Forma de Particion{{{
crear_tipo_particion(){
  LUKS=0
  LVM=0
  print_title "TIPOS DE PARTICIONES"
  print_info "Particionar un disco duro le permite a uno dividir lógicamente el espacio disponible en secciones a las que se puede acceder independientemente el uno del otro."
  print_warning "Defaul:(Normalmente Usado) LUKS:(Es una especificación de cifrado de disco), LVM:(Es un administrador de volumen lógico)"
  print_warning "Mantener actual no funciona con LUKS"
  partition_layouts=("Default" "LVM" "LVM+LUKS" "Maintain Current")
  PS3="$prompt1"
  echo -e "Selecciona tipo de Particion a utilizar:"
  select OPT in "${partition_layouts[@]}"; do
    partition_layout=$OPT
    case "$REPLY" in
    1)
      crear_particion
      ;;
    2)
      crear_particion
      logic_volum_manager
      ;;
    3)
      crear_particion
      encriptado_luks
      logic_vol_manager
      ;;
    4)
      modprobe dm-mod
      vgscan &>/dev/null
      vgchange -ay &>/dev/null
      ;;
    *)
      invalid_option
      ;;
    esac
    [[ -n $OPT ]] && break
  done
}
#}}}
#Particionar Disco{{{
crear_particion(){
  apps_list=("cfdisk" "cgdisk" "fdisk" "gdisk" "parted")
  PS3="$prompt1"
  echo -e "Seleccione el programa para particionar:"
  select OPT in "${apps_list[@]}"; do
    if contains_element "$OPT" "${apps_list[@]}"; then
      seleccionar_disco
      case $OPT in
      parted)
        parted -a opt ${device}
        ;;
      *)
        $OPT ${device}
        ;;
      esac
      break
    else
      invalid_option
    fi
  done
}
#}}}
#Encriptado luks{{{
encriptado_luks(){
  print_title "LUKS - Dm-crypt)"
  print_info "La configuración de clave unificada de Linux o LUKS es una especificación de cifrado de disco creada por Clemens Fruhwirth y originalmente destinada a Linux."
  print_danger "\tNo use para particiones de arranque"
  block_list=($(lsblk | grep 'part' | awk '{print "/dev/" substr($1,3)}'))
  PS3="$prompt1"
  echo -e "Seleccionar particion:"
  select OPT in "${block_list[@]}"; do
    if contains_element "$OPT" "${block_list[@]}"; then
      cryptsetup --cipher aes-xts-plain64 --key-size 512 --hash sha512 --iter-time 5000 --use-random --verify-passphrase luksFormat $OPT
      cryptsetup open --type luks $([[ $TRIM -eq 1 ]] && echo "--allow-discards") $OPT crypt
      LUKS=1
      LUKS_DISK=$(echo ${OPT} | sed 's/\/dev\///')
      break
    elif [[ $OPT == "Cancel" ]]; then
      break
    else
      invalid_option
    fi
  done
}
#}}}
#particion tipo LVM {{{
logic_vol_manager(){
  print_title "LVM"
  print_info "LVM es un administrador de volumen lógico para el kernel de Linux; gestiona unidades de disco y dispositivos de almacenamiento masivo similares. "
  print_warning "La última partición ocupará el 100% del espacio libre restante"
  if [[ $LUKS -eq 1 ]]; then
    pvcreate /dev/mapper/crypt
    vgcreate lvm /dev/mapper/crypt
  else
    block_list=($(lsblk | grep 'part' | awk '{print "/dev/" substr($1,3)}'))
    PS3="$prompt1"
    echo -e "Seleccionar particion:"
    select OPT in "${block_list[@]}"; do
      if contains_element "$OPT" "${block_list[@]}"; then
        pvcreate $OPT
        vgcreate lvm $OPT
        break
      else
        invalid_option
      fi
    done
  fi
  read -p "Ingrese el numero de particiones [ex: 2]: " number_partitions
  i=1
  while [[ $i -le $number_partitions ]]; do
    read -p "Ingrese $iª nombre particion [ex: home]: " partition_name
    if [[ $i -eq $number_partitions ]]; then
      lvcreate -l 100%FREE lvm -n ${partition_name}
    else
      read -p "Ingrese $iª Tamaño particion [ex: 25G, 200M]: " partition_size
      lvcreate -L ${partition_size} lvm -n ${partition_name}
    fi
    i=$((i + 1))
  done
  LVM=1
}
#}}}
#Formatear/Montar Particiones{{{
formatear_particiones(){
  print_title "FORMATO PARA PARTICIONES"
  print_info "Este paso seleccionará y formateará la partición seleccionada donde se instalará archlinux"
  print_danger "\tToda la informacion en la partición ROOT y SWAP se destruiran."
  i=0
  block_list=($(lsblk | grep 'part\|lvm' | awk '{print substr($1,3)}'))
  if [[ ${#block_list[@]} -eq 0 ]]; then
    echo "No se encontró partición"
    exit 0
  fi
  partitions_list=()
  for OPT in ${block_list[@]}; do
    check_lvm=$(echo $OPT | grep lvm)
    if [[ -z $check_lvm ]]; then
      partitions_list+=("/dev/$OPT")
    else
      partitions_list+=("/dev/mapper/$OPT")
    fi
  done
  if [[ $UEFI -eq 1 ]]; then
    partition_name=("root" "EFI" "swap" "otra")
  else
    partition_name=("root" "swap" "otra")
  fi
  select_filesystem() {
    filesystems_list=("btrfs" "ext2" "ext3" "ext4" "f2fs" "jfs" "nilfs2" "ntfs" "reiserfs" "vfat" "xfs")
    PS3="$prompt1"
    echo -e "Seleccionar sistema de archivos:\n"
    select filesystem in "${filesystems_list[@]}"; do
      if contains_element "${filesystem}" "${filesystems_list[@]}"; then
        break
      else
        invalid_option
      fi
    done
  }
  disable_partition() {
    #remove the selected partition from list
    unset partitions_list[${partition_number}]
    partitions_list=(${partitions_list[@]})
    #increase i
    [[ ${partition_name[i]} != otra ]] && i=$((i + 1))
  }
  format_partition() {
    read_input_text "Confirmar Formato de la particion $1 "
    if [[ $OPTION == s ]]; then
      [[ -z $3 ]] && select_filesystem || filesystem=$3
      mkfs.${filesystem} $1 \
        $([[ ${filesystem} == xfs || ${filesystem} == btrfs || ${filesystem} == reiserfs ]] && echo "-f") \
        $([[ ${filesystem} == vfat ]] && echo "-F32") \
        $([[ $TRIM -eq 1 && ${filesystem} == ext4 ]] && echo "-E discard")
      fsck $1
      mkdir -p $2
      mount -t ${filesystem} $1 $2
      disable_partition
    fi
  }
  format_swap_partition() {
    read_input_text "Confirmar Formato de la particion $1 "
    if [[ $OPTION == s ]]; then
      mkswap $1
      swapon $1
      disable_partition
    fi
  }
  create_swap() {
    swap_options=("Particion" "Archivo" "Omitir")
    PS3="$prompt1"
    echo -e "Select ${BYellow}${partition_name[i]}${Reset} filesystem:\n"
    select OPT in "${swap_options[@]}"; do
      case "$REPLY" in
      1)
        select partition in "${partitions_list[@]}"; do
          partition_number=$(($REPLY - 1))
          if contains_element "${partition}" "${partitions_list[@]}"; then
            format_swap_partition "${partition}"
          fi
          break
        done
        swap_type="Particion"
        break
        ;;
      2)
        total_memory=$(grep MemTotal /proc/meminfo | awk '{print $2/1024}' | sed 's/\..*//')
        fallocate -l ${total_memory}M ${MOUNTPOINT}/swapfile
        chmod 600 ${MOUNTPOINT}/swapfile
        mkswap ${MOUNTPOINT}/swapfile
        swapon ${MOUNTPOINT}/swapfile
        i=$((i + 1))
        swap_type="Archivo"
        break
        ;;
      3)
        i=$((i + 1))
        swap_type="none"
        break
        ;;
      *)
        invalid_option
        ;;
      esac
    done
  }
  check_mountpoint() {
    if mount | grep $2; then
      echo "Montado exitosamente"
      disable_partition "$1"
    else
      echo "ADVERTENCIA: No montado con exito"
    fi
  }
  set_efi_partition() {
    efi_options=("/boot/efi" "/boot")
    PS3="$prompt1"
    echo -e "Seleccione EFI:\n"
    select EFI_MOUNTPOINT in "${efi_options[@]}"; do
      if contains_element "${EFI_MOUNTPOINT}" "${efi_options[@]}"; then
        break
      else
        invalid_option
      fi
    done
  }
  while true; do
    PS3="$prompt1"
    if [[ ${partition_name[i]} == swap ]]; then
      create_swap
    else
      echo -e "Seleccione particion ${BYellow}${partition_name[i]}${Reset}:\n"
      select partition in "${partitions_list[@]}"; do
        #get the selected number - 1
        partition_number=$(($REPLY - 1))
        if contains_element "${partition}" "${partitions_list[@]}"; then
          case ${partition_name[i]} in
          root)
            ROOT_PART=$(echo ${partition} | sed 's/\/dev\/mapper\///' | sed 's/\/dev\///')
            ROOT_MOUNTPOINT=${partition}
            format_partition "${partition}" "${MOUNTPOINT}"
            ;;
          EFI)
            set_efi_partition
            read_input_text "Formato ${partition} particion"
            if [[ $OPTION == s ]]; then
              format_partition "${partition}" "${MOUNTPOINT}${EFI_MOUNTPOINT}" vfat
            else
              mkdir -p "${MOUNTPOINT}${EFI_MOUNTPOINT}"
              mount -t vfat "${partition}" "${MOUNTPOINT}${EFI_MOUNTPOINT}"
              check_mountpoint "${partition}" "${MOUNTPOINT}${EFI_MOUNTPOINT}"
            fi
            ;;
          otra)
            if [[ ${partition_name[i]} == otra ]]; then
              read_input_text "Deseas seguir Configurando esta particion"
              [[ $OPTION != s ]] && break
            fi
            read -p "Punto de Montaje [ex: /home]:" directory
            [[ $directory == "/boot" ]] && BOOT_MOUNTPOINT=$(echo ${partition} | sed 's/[0-9]//')
            select_filesystem
            read_input_text "Formato ${partition} particion"
            if [[ $OPTION == s ]]; then
              format_partition "${partition}" "${MOUNTPOINT}${directory}" "${filesystem}"
            else
              read_input_text "Confirma fs="${filesystem}" part="${partition}" dir="${directory}""
              if [[ $OPTION == s ]]; then
                mkdir -p ${MOUNTPOINT}${directory}
                mount -t ${filesystem} ${partition} ${MOUNTPOINT}${directory}
                check_mountpoint "${partition}" "${MOUNTPOINT}${directory}"
              fi
            fi
            ;;
          esac
          break
        else
          invalid_option
        fi
      done
    fi
    if [[ ${#partitions_list[@]} -eq 0 && ${partition_name[i]} != swap ]]; then
      break
    elif [[ ${partition_name[i]} == otra ]]; then
      read_input_text "Configurar mas Particiones s/n"
      [[ $OPTION != s ]] && break
    fi
  done
  pause_function
}
#}}}
#Editor Preferido{{{
editor_default(){
  print_title "EDITOR POR DEFECTO A UTILIZAR"
  editors_list=("nano" "vim")
  PS3="$prompt1"
  echo -e "Seleccionar editor\n"
  select EDITOR in "${editors_list[@]}"; do
    if contains_element "$EDITOR" "${editors_list[@]}"; then
      package_install "$EDITOR"
      break
    else
      invalid_option
    fi
  done
}
#}}}
#Seleccionar Servidor{{{
seleccionar_server(){
  local countries_code=("AU" "AT" "BY" "BE" "BD" "BR" "BG" "CA" "CL" "CN" "CO" "CZ" "DK" "EE" "FI" "FR" "DE" "GR" "HK" "HU" "IS" "ID" "IN" "IR" "IE" "IL" "IT" "JP" "KZ" "KR" "LV" "LU" "MK" "NL" "NC" "NZ" "NO" "PL" "PT" "RO" "RU" "RS" "SG" "SK" "ZA" "ES" "LK" "SE" "CH" "TW" "TR" "UA" "GB" "US" "UZ" "VN")
  local countries_name=("Australia" "Austria" "Belarus" "Belgium" "Bangladesh" "Brazil" "Bulgaria" "Canada" "Chile" "China" "Colombia" "Czech Republic" "Denmark" "Estonia" "Finland" "France" "Germany" "Greece" "Hong Kong" "Hungary" "Iceland" "Indonesia" "India" "Iran" "Ireland" "Israel" "Italy" "Japan" "Kazakhstan" "Korea" "Latvia" "Luxembourg" "Macedonia" "Netherlands" "New Caledonia" "New Zealand" "Norway" "Poland" "Portugal" "Romania" "Russia" "Serbia" "Singapore" "Slovakia" "South Africa" "Spain" "Sri Lanka" "Sweden" "Switzerland" "Taiwan" "Turkey" "Ukraine" "United Kingdom" "United States" "Uzbekistan" "Viet Nam")
  country_list() {
    #`reflector --list-countries | sed 's/[0-9]//g' | sed 's/^/"/g' | sed 's/,.*//g' | sed 's/ *$//g'  | sed 's/$/"/g' | sed -e :a -e '$!N; s/\n/ /; ta'`
    PS3="$prompt1"
    echo "Selecciona tu Pais:"
    select country_name in "${countries_name[@]}"; do
      if contains_element "$country_name" "${countries_name[@]}"; then
        country_code=${countries_code[$(($REPLY - 1))]}
        break
      else
        invalid_option
      fi
    done
  }
  print_title "MIRRORLIST - (Lista de Servidores de Descarga)"
  print_info "Esta opción es una guía para seleccionar y configurar sus espejos, y una lista de los espejos disponibles actuales."
  OPTION=n
  while [[ $OPTION != s ]]; do
    country_list
    read_input_text "Confirmar Pais: $country_name"
  done
  url="https://www.archlinux.org/mirrorlist/?country=${country_code}&use_mirror_status=on"
  tmpfile=$(mktemp --suffix=-mirrorlist)
  curl -so ${tmpfile} ${url}
  sed -i 's/^#Server/Server/g' ${tmpfile}
  if [[ -s ${tmpfile} ]]; then
    {
      echo "Copia de seguridad del original mirrorlist...Presiona Enter"
      mv -i /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.orig
    } &&
      {
        echo "Rotación de la nueva lista en su lugar...Presiona Enter"
        mv -i ${tmpfile} /etc/pacman.d/mirrorlist
      }
  else
    echo "No se puede actualizar, no se pudo descargar la lista..Presiona Enter"
  fi
  pacman -Sy pacman-contrib
  cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.tmp
  rankmirrors -n 7 /etc/pacman.d/mirrorlist.tmp > /etc/pacman.d/mirrorlist
  rm /etc/pacman.d/mirrorlist.tmp

  chmod +r /etc/pacman.d/mirrorlist
  $EDITOR /etc/pacman.d/mirrorlist
}
#}}}
#Instalar Sistema Base {{{
version_linux(){
  print_title "VERSION KERNEL LINUX"
  version_list=("linux (normal)" "linux-lts (Soporte a Largo Plazo)" "linux-hardened (Seguridad Alta)" "linux-zen (¿Por qué manejar si puedes volar?-ASUMES EL RETO..)")
  PS3="$prompt1"
  echo -e "Seleccione la versión de Linux para instalar\n"
  select VERSION in "${version_list[@]}"; do
    if contains_element "$VERSION" "${version_list[@]}"; then
      if [ "linux (normal)" == "$VERSION" ]; then
        pacstrap ${MOUNTPOINT} base linux linux-headers
    elif [ "linux-lts (Soporte a Largo Plazo)" == "$VERSION" ]; then
        pacstrap ${MOUNTPOINT} base linux-lts linux-lts-headers
    elif [ "linux-hardened (Seguridad Alta)" == "$VERSION" ]; then
        pacstrap ${MOUNTPOINT} base linux-hardened linux-hardened-headers
    elif [ "linux-zen (¿Por qué manejar si puedes volar?-ASUMES EL RETO..)" == "$VERSION" ]; then
        pacstrap ${MOUNTPOINT} base linux-zen linux-zen-headers
      fi
      pacstrap ${MOUNTPOINT} \
        linux-firmware nano dhcpcd vi lvm2 netctl net-tools
      break
    else
      invalid_option
    fi
  done
}
install_base(){
  print_title "INSTALAR SISTEMA BASE"
  print_info "Instalando PGP keyring"
  pacman -Sy archlinux-keyring --noconfirm
  print_info "Usando el script pacstrap, instalamos el sistema base. El grupo de paquetes base-devel también se instalará."
  rm ${MOUNTPOINT}${EFI_MOUNTPOINT}/vmlinuz-linux
  version_linux
  pacstrap ${MOUNTPOINT} base-devel grub
  [[ $? -ne 0 ]] && error_msg "Error al instalar el sistema base en ${MOUNTPOINT} Verifique los mensajes de error arriba."
  local PTABLE=$(parted -sl | grep "gpt")
  [[ -n $PTABLE ]] && pacstrap ${MOUNTPOINT} gptfdisk
  WIRELESS_DEV=$(ip link | grep wl | awk '{print $2}' | sed 's/://' | sed '1!d')
  if [[ -n $WIRELESS_DEV ]]; then
    pacstrap ${MOUNTPOINT} iw wireless_tools wpa_supplicant dialog
  else
    WIRED_DEV=$(ip link | grep "ens\|eno\|enp" | awk '{print $2}' | sed 's/://' | sed '1!d')
    if [[ -n $WIRED_DEV ]]; then
      arch_chroot "systemctl enable dhcpcd@${WIRED_DEV}.service"
    fi
  fi
}
#}}}
#Generar FSTAB{{{
generar_fstab(){
  print_title "FSTAB"
  print_info "El archivo /etc/fstab contiene información del sistema de archivos estático. Define cómo se deben montar e integrar los dispositivos de almacenamiento y las particiones en el sistema general. El comando mount lo lee para determinar qué opciones usar al montar una partición o partición específica."
  if [[ ! -f ${MOUNTPOINT}/etc/fstab.backup ]]; then
    cp ${MOUNTPOINT}/etc/fstab ${MOUNTPOINT}/etc/fstab.backup
  else
    cp ${MOUNTPOINT}/etc/fstab.backup ${MOUNTPOINT}/etc/fstab
  fi
  if [[ $UEFI -eq 1 ]]; then
    fstab_list=("DEV" "PARTUUID" "LABEL")
  else
    fstab_list=("DEV" "UUID" "LABEL")
  fi

  PS3="$prompt1"
  echo -e "Configurar fstab basado en:"
  select OPT in "${fstab_list[@]}"; do
    case "$REPLY" in
    1)
      genfstab -p ${MOUNTPOINT} >>${MOUNTPOINT}/etc/fstab
      ;;
    2)
      if [[ $UEFI -eq 1 ]]; then
        genfstab -t PARTUUID -p ${MOUNTPOINT} >>${MOUNTPOINT}/etc/fstab
      else
        genfstab -U -p ${MOUNTPOINT} >>${MOUNTPOINT}/etc/fstab
      fi
      ;;
    3)
      genfstab -L -p ${MOUNTPOINT} >>${MOUNTPOINT}/etc/fstab
      ;;
    *)
      invalid_option
      ;;
    esac
    [[ -n $OPT ]] && break
  done
  fstab=$OPT
  echo "Revisa tu fstab"
  [[ -f ${MOUNTPOINT}/swapfile ]] && sed -i "s/\\${MOUNTPOINT}//" ${MOUNTPOINT}/etc/fstab
  pause_function
  $EDITOR ${MOUNTPOINT}/etc/fstab
}
#}}}
#Configurar Nombre Equipo (HOSTNAME){{{
configurar_hostname(){
  print_title "HOSTNAME (Nombre Equipo)- Establecer el nombre del equipo"
  print_info "Un nombre de host es un nombre único creado para identificar una máquina en una red. Los nombres de host están restringidos a caracteres alfanuméricos..\nSe puede usar el guión (-), pero un nombre de host no puede comenzar o terminar con él. La longitud está restringida a 63 caracteres."
  read -p "Hostname [ex: archlinux]: " host_name
  echo "$host_name" >${MOUNTPOINT}/etc/hostname
  if [[ ! -f ${MOUNTPOINT}/etc/hosts.backup ]]; then
    cp ${MOUNTPOINT}/etc/hosts ${MOUNTPOINT}/etc/hosts.backup
  else
    cp ${MOUNTPOINT}/etc/hosts.backup ${MOUNTPOINT}/etc/hosts
  fi
  arch_chroot "sed -i '/127.0.0.1/s/$/ '${host_name}'/' /etc/hosts"
  arch_chroot "sed -i '/::1/s/$/ '${host_name}'/' /etc/hosts"
}
#}}}
#Configurar Zona Horaria (TIMEZONE){{{
configurar_zona_horaria(){
  print_title "TIMEZONE -  reloj del sistema"
  print_info "En un sistema operativo, la hora (reloj) está determinada por cuatro partes: valor de hora, hora estándar, zona horaria y DST (horario de verano, si corresponde)."
  OPTION=n
  while [[ $OPTION != s ]]; do
    settimezone
    read_input_text "Confirmar zona horaria (${ZONE}/${SUBZONE})"
  done
  arch_chroot "ln -sf /usr/share/zoneinfo/${ZONE}/${SUBZONE} /etc/localtime"
  arch_chroot "sed -i '/#NTP=/d' /etc/systemd/timesyncd.conf"
  arch_chroot "sed -i 's/#Fallback//' /etc/systemd/timesyncd.conf"
  arch_chroot "echo \"FallbackNTP=0.pool.ntp.org 1.pool.ntp.org 0.fr.pool.ntp.org\" >> /etc/systemd/timesyncd.conf"
  arch_chroot "systemctl enable systemd-timesyncd.service"
}
#}}}
#Configurar Idioma (LOCALE){{{
configurar_idioma(){
  print_title "LOCALE - PAIS/IDIOMA DEL SISTEMA"
  print_info "Se establece en el archivo /etc/locale.conf. Las configuraciones regionales se usan en Linux para definir qué idioma usa el usuario. Como las configuraciones regionales también definen los juegos de caracteres que se utilizan, la configuración de la configuración regional correcta es especialmente importante si el idioma contiene caracteres que no son ASCII."
  OPTION=n
  while [[ $OPTION != s ]]; do
    setlocale
    read_input_text "Confirmar Idioma ($LOCALE)"
  done
  echo 'LANG="'$LOCALE_UTF8'"' >${MOUNTPOINT}/etc/locale.conf
  arch_chroot "sed -i 's/#\('${LOCALE_UTF8}'\)/\1/' /etc/locale.gen"
  arch_chroot "locale-gen"
}
#}}}
#Configurar Reloj Interno{{{
configurar_reloj(){
  print_title "HARDWARE CLOCK TIME - (HORA DE RELOJ DE HARDWARE)"
  print_info "Este se establece en el archivo /etc/adjtime. Configure el modo de reloj de hardware de manera uniforme entre sus sistemas operativos en la misma máquina. De lo contrario, sobrescribirán la hora y provocarán cambios en el reloj (lo que puede hacer que la corrección de la deriva horaria se calibre incorrectamente)."
  hwclock_list=('UTC' 'Localtime')
  PS3="$prompt1"
  select OPT in "${hwclock_list[@]}"; do
    case "$REPLY" in
    1)
      arch_chroot "hwclock --systohc --utc"
      ;;
    2)
      arch_chroot "hwclock --systohc --localtime"
      ;;
    *) invalid_option ;;
    esac
    [[ -n $OPT ]] && break
  done
  hwclock=$OPT
}
#}}}
#Generar MKINITCPIO Dico RAM{{{
generar_mkinitcpio(){
  print_title " MKINITCPIO "
  print_info "mkinitcpio es un script Bash que se usa para crear un entorno de disco RAM inicial."
  print_info "Se establece en el archivo /etc/mkinitcpio.conf"
  [[ $LUKS -eq 1 ]] && sed -i '/^HOOK/s/block/block keymap encrypt/' ${MOUNTPOINT}/etc/mkinitcpio.conf
  [[ $LVM -eq 1 ]] && sed -i '/^HOOK/s/filesystems/lvm2 filesystems/' ${MOUNTPOINT}/etc/mkinitcpio.conf
  $EDITOR ${MOUNTPOINT}/etc/mkinitcpio.conf
  if [ "$(arch-chroot ${MOUNTPOINT} ls /boot | grep hardened -c)" -gt "0" ]; then
    arch_chroot "mkinitcpio -p linux-hardened"
  elif [ "$(arch-chroot ${MOUNTPOINT} ls /boot | grep lts -c)" -gt "0" ]; then
    arch_chroot "mkinitcpio -p linux-lts"
  elif [ "$(arch-chroot ${MOUNTPOINT} ls /boot | grep zen -c)" -gt "0"]; then
    arch_chroot "mkinitcpio -p linux-zen"
  else
    arch_chroot "mkinitcpio -p linux"
  fi
}
#}}}
#Instalar Cargador de Arranque{{{
cargador_arranque(){
  print_title "BOOTLOADER - CARGADOR DE ARRANQUE"
  print_info "El gestor de arranque es responsable de cargar el núcleo y el disco RAM inicial antes de iniciar el proceso de arranque.."
  print_warning "\tROOT Particion: ${ROOT_MOUNTPOINT}"
  if [[ $UEFI -eq 1 ]]; then
    print_warning "\tUEFI Modo Detectado"
    bootloaders_list=("Grub2" "Syslinux" "Systemd" "omitir")
  else
    print_warning "\tBIOS Modo Detectado"
    bootloaders_list=("Grub2" "Syslinux" "Omitir")
  fi
  PS3="$prompt1"
  echo -e "Instalar bootloader:\n"
  select bootloader in "${bootloaders_list[@]}"; do
    case "$REPLY" in
    1)
      pacstrap ${MOUNTPOINT} grub os-prober
      break
      ;;
    2)
      pacstrap ${MOUNTPOINT} syslinux gptfdisk
      break
      ;;
    3)
      break
      ;;
    4)
      [[ $UEFI -eq 1 ]] && break || invalid_option
      ;;
    *)
      invalid_option
      ;;
    esac
  done
  [[ $UEFI -eq 1 ]] && pacstrap ${MOUNTPOINT} efibootmgr dosfstools
}
configurar_arranque(){
  case $bootloader in
  Grub2)
    print_title " GRUB2 "
    print_info "GRUB2 es la próxima generación del cargador de arranque unificado(GRUB).\nEn resumen, el gestor de arranque es el primer programa de software que se ejecuta cuando se inicia una computadora. Es responsable de cargar y transferir el control al Linux kernel."
    grub_install_mode=("Automatico" "Manual")
    PS3="$prompt1"
    echo -e "Instalar Grub:\n"
    select OPT in "${grub_install_mode[@]}"; do
      case "$REPLY" in
      1)
        if [[ $LUKS -eq 1 ]]; then
          sed -i -e 's/GRUB_CMDLINE_LINUX="\(.\+\)"/GRUB_CMDLINE_LINUX="\1 cryptdevice=\/dev\/'"${LUKS_DISK}"':crypt"/g' -e 's/GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="cryptdevice=\/dev\/'"${LUKS_DISK}"':crypt"/g' ${MOUNTPOINT}/etc/default/grub
        fi
        if [[ $UEFI -eq 1 ]]; then
          arch_chroot "grub-install --target=x86_64-efi --efi-directory=${EFI_MOUNTPOINT} --bootloader-id=arch_grub --recheck"
        else
          arch_chroot "grub-install --target=i386-pc --recheck --debug ${BOOT_MOUNTPOINT}"
        fi
        break
        ;;
      2)
        arch-chroot ${MOUNTPOINT}
        break
        ;;
      *)
        invalid_option
        ;;
      esac
    done
    arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
    ;;
  Syslinux)
    print_title " SYSLINUX "
    print_info "Syslinux es una colección de cargadores de arranque capaces de arrancar desde discos duros, CD y a través de la red a través de PXE. Es compatible con los sistemas de archivos fat, ext2, ext3, ext4 y btrfs."
    syslinux_install_mode=("[MBR] Automatico" "[PARTITION] Automatico" "Manual")
    PS3="$prompt1"
    echo -e "Instalar Syslinux:\n"
    select OPT in "${syslinux_install_mode[@]}"; do
      case "$REPLY" in
      1)
        arch_chroot "syslinux-install_update -iam"
        if [[ $LUKS -eq 1 ]]; then
          sed -i "s/APPEND root=.*/APPEND root=\/dev\/mapper\/${ROOT_PART} cryptdevice=\/dev\/${LUKS_DISK}:crypt ro/g" ${MOUNTPOINT}${EFI_MOUNTPOINT}/syslinux/syslinux.cfg
        elif [[ $LVM -eq 1 ]]; then
          sed -i "s/sda[0-9]/\/dev\/mapper\/${ROOT_PART}/g" ${MOUNTPOINT}${EFI_MOUNTPOINT}/syslinux/syslinux.cfg
        else
          sed -i "s/sda[0-9]/${ROOT_PART}/g" ${MOUNTPOINT}${EFI_MOUNTPOINT}/syslinux/syslinux.cfg
        fi
        print_warning "La partición en cuestión debe ser lo que tenga como /(root), no /boot."
        pause_function
        $EDITOR ${MOUNTPOINT}${EFI_MOUNTPOINT}/syslinux/syslinux.cfg
        break
        ;;
      2)
        arch_chroot "syslinux-install_update -i"
        if [[ $LUKS -eq 1 ]]; then
          sed -i "s/APPEND root=.*/APPEND root=\/dev\/mapper\/${ROOT_PART} cryptdevice=\/dev\/${LUKS_DISK}:crypt ro/g" ${MOUNTPOINT}${EFI_MOUNTPOINT}/syslinux/syslinux.cfg
        elif [[ $LVM -eq 1 ]]; then
          sed -i "s/sda[0-9]/\/dev\/mapper\/${ROOT_PART}/g" ${MOUNTPOINT}${EFI_MOUNTPOINT}/syslinux/syslinux.cfg
        else
          sed -i "s/sda[0-9]/${ROOT_PART}/g" ${MOUNTPOINT}${EFI_MOUNTPOINT}/syslinux/syslinux.cfg
        fi
        print_warning "La partición en cuestión debe ser lo que tenga como /(root), no /boot."
        pause_function
        $EDITOR ${MOUNTPOINT}${EFI_MOUNTPOINT}/syslinux/syslinux.cfg
        break
        ;;
      3)
        print_info "Su partición de arranque, en la que planea instalar Syslinux, debe contener un sistema de archivos FAT, ext2, ext3, ext4 o Btrfs. Debe instalarlo en un directorio montado, no en una partición /dev/sdXY. No tiene que instalarlo en el directorio raíz de un sistema de archivos, por ejemplo, con la partición /dev/sda1 montada en /boot puede instalar Syslinux en el directorio syslinux"
        echo -e $prompt3
        print_warning "mkdir /boot/syslinux\nextlinux --install /boot/syslinux "
        arch-chroot ${MOUNTPOINT}
        break
        ;;
      *)
        invalid_option
        ;;
      esac
    done
    ;;
  Systemd)
    print_title " SYSTEMD BOOT "
    print_info "Instalalo bajo tu responsabilidad, solo si sabes que haces no principiantes....aqui no"
    print_info "systemd-boot (anteriormente llamado gummiboot), es un simple administrador de arranque UEFI que ejecuta imágenes EFI configuradas. La entrada predeterminada se selecciona mediante un patrón configurado (glob) o un menú en pantalla. Se incluye con systemd desde systemd 220-2."
    print_warning "\tsugiere que /boot esté montado en la partición EFI, no /boot/efi, para simplificar la actualización y la configuración."
    gummiboot_install_mode=("Automatico" "Manual")
    PS3="$prompt1"
    echo -e "Instalar Gummiboot:\n"
    select OPT in "${gummiboot_install_mode[@]}"; do
      case "$REPLY" in
      1)
        arch_chroot "bootctl --path=${EFI_MOUNTPOINT} install"
        print_warning "Por favor, compruebe su .conf file"
        partuuid=$(blkid -s PARTUUID ${ROOT_MOUNTPOINT} | awk '{print $2}' | sed 's/"//g' | sed 's/^.*=//')
        if [ "$(arch-chroot ${MOUNTPOINT} ls /boot | grep hardened -c)" -gt "0" ]; then
          img_name="linux-hardened"
        elif [ "$(arch-chroot ${MOUNTPOINT} ls /boot | grep lts -c)" -gt "0" ]; then
          img_name="linux-lts"
        elif [ "$(arch-chroot ${MOUNTPOINT} ls /boot | grep zen -c)" -gt "0" ]; then
          img_name="linux-zen"
        else
          img_name="linux"
        fi
        if [[ $LUKS -eq 1 ]]; then
          echo -e "title\tArch Linux\nlinux\t/vmlinuz-${img_name}\ninitrd\t/initramfs-${img_name}.img\noptions\tcryptdevice=\/dev\/${LUKS_DISK}:luks root=\/dev\/mapper\/${ROOT_PART} rw" >${MOUNTPOINT}${EFI_MOUNTPOINT}/loader/entries/arch.conf
        elif [[ $LVM -eq 1 ]]; then
          echo -e "title\tArch Linux\nlinux\t/vmlinuz-${img_name}\ninitrd\t/initramfs-${img_name}.img\noptions\troot=\/dev\/mapper\/${ROOT_PART} rw" >${MOUNTPOINT}${EFI_MOUNTPOINT}/loader/entries/arch.conf
        else
          echo -e "title\tArch Linux\nlinux\t/vmlinuz-${img_name}\ninitrd\t/initramfs-${img_name}.img\noptions\troot=PARTUUID=${partuuid} rw" >${MOUNTPOINT}${EFI_MOUNTPOINT}/loader/entries/arch.conf
        fi
        echo -e "default  arch\ntimeout  5" >${MOUNTPOINT}${EFI_MOUNTPOINT}/loader/loader.conf
        pause_function
        $EDITOR ${MOUNTPOINT}${EFI_MOUNTPOINT}/loader/entries/arch.conf
        $EDITOR ${MOUNTPOINT}${EFI_MOUNTPOINT}/loader/loader.conf
        break
        ;;
      2)
        arch-chroot ${MOUNTPOINT}
        break
        ;;
      *)
        invalid_option
        ;;
      esac
    done
    ;;
  esac
  pause_function
}
#}}}
#Contraseña ROOT{{{
password_root(){
  print_title "CONTRASEÑA ROOT"
  print_warning "Ingrese su nueva contraseña de ROOT"
  arch_chroot "passwd"
  pause_function
}
#}}}
#Desmontar particiones{{{
desmontar_particiones(){
  mounted_partitions=($(lsblk | grep ${MOUNTPOINT} | awk '{print $7}' | sort -r))
  swapoff -a
  for i in ${mounted_partitions[@]}; do
    umount $i
  done
}
#}}}
#FINISH {{{
finish() {
  print_title "INSTALACION COMPLETA"
  print_warning "Se copiara la carpeta a root"
  cp -R $(pwd) ${MOUNTPOINT}/root
  read_input_text "Reiniciar"
  if [[ $OPTION == s ]]; then
    desmontar_particiones
    reboot
  fi
  exit 0
}
salir(){
  exit 0
}
#}}}
#Instalacion Archlinux{{{
print_title "Instalar Sistema Base ArchLinux 2020"
pause_function
check_boot_system
#check_connection
check_trim
#pacman -Sy
while true; do
  print_title "    MENU DE INSTALACION ARCHLINUX 2020"
  print_info "Revisa antes las caracteristicas de tu equipo"
  print_warning "$([[ ${UEFI} -eq 1 ]] && echo "ARRANQUE MODO UEFI" || echo "ARRANQUE MODO BIOS";)"
  echo ""
  echo "  1) $(mainmenu_item "${checklist[1]}" "Seleccionar Teclado" "${KEYMAP}")"
  echo "  2) $(mainmenu_item "${checklist[2]}" "Particionar Disco" "${block_list}")"
  echo "  3) $(mainmenu_item "${checklist[3]}" "Formatear/Montar Particiones" " ${partition}(${filesystem}) swap(${swap_type})")"
  echo "  4) $(mainmenu_item "${checklist[4]}" "Editor Preferido" "${EDITOR}")"
  echo "  5) $(mainmenu_item "${checklist[5]}" "Seleccionar Servidor(Opcional)" "${country_name} (${country_code})")"
  echo "  6) $(mainmenu_item "${checklist[6]}" "Instalar Sistema Base" "${VERSION}")"
  echo "  7) $(mainmenu_item "${checklist[7]}" "Generar FSTAB")"
  echo "  8) $(mainmenu_item "${checklist[8]}" "Configurar Nombre Equipo (HOSTNAME)" "${host_name}")"
  echo "  9) $(mainmenu_item "${checklist[9]}" "Configurar Zona Horaria (TIMEZONE)" "${ZONE}/${SUBZONE}")"
  echo " 10) $(mainmenu_item "${checklist[10]}" "Configurar Idioma (LOCALE)" "${LOCALE}")"
  echo " 11) $(mainmenu_item "${checklist[11]}" "Configurar Reloj Interno" "${hwclock}")"
  echo " 12) $(mainmenu_item "${checklist[12]}" "Generar MKINITCPIO Dico RAM")"
  echo " 13) $(mainmenu_item "${checklist[13]}" "Instalar Cargador de Arranque" "${bootloader}")"
  echo " 14) $(mainmenu_item "${checklist[14]}" "Contraseña ROOT")"
  echo ""
  echo " m) Regresar al Menu Principal"
  echo ""
  echo " s) Salir"
  echo ""
  read_input_options
  for OPT in ${OPTIONS[@]}; do
    case "$OPT" in
    1)
      seleccionar_teclado
      checklist[1]=1
      ;;
    2)
      desmontar_particiones
      crear_particion
      checklist[2]=1
      ;;
    3)
      desmontar_particiones
      formatear_particiones
      checklist[3]=1
      ;;
    4)
      editor_default
      checklist[4]=1
      ;;
    5)
      seleccionar_server
      checklist[5]=1
      ;;
    6)
      install_base
      configurar_teclado
      checklist[6]=1
      ;;
    7)
      generar_fstab
      checklist[7]=1
      ;;
    8)
      configurar_hostname
      checklist[8]=1
      ;;
    9)
      configurar_zona_horaria
      checklist[9]=1
      ;;
    10)
      configurar_idioma
      checklist[10]=1
      ;;
    11)
      configurar_reloj
      checklist[11]=1
      ;;
    12)
      generar_mkinitcpio
      checklist[12]=1
      ;;
    13)
      cargador_arranque
      configurar_arranque
      checklist[13]=1
      ;;
    14)
      password_root
      checklist[14]=1
      ;;
    "m")
      ./setuparch
      salir
      ;;
    "s")
      finish
      ;;
    *)
      invalid_option
      ;;
    esac
  done
done
#}}}
